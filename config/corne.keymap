#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#include "helpers/helper.h"

// Layer Definitions
#define QWERTY 0
#define GAMING_QWERTY 1
#define NAV 2
#define MOUSE 3
#define MEDIA 4
#define NUM 5
#define SYM 6
#define LAYERS 7
#define FN 8
#define FRENCH 9

// Behavior configuration
&mt {
    compatible = "zmk,behavior-hold-tap";
    tapping-term-ms = <220>;
    quick_tap_ms = <150>;
    flavor = "tap-preferred";
};

&lt {
    compatible = "zmk,behavior-hold-tap";
    tapping-term-ms = <220>;
    quick_tap_ms = <150>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <500>;
    quick-release;
};


// Keymap configuration
/ {
    keymap {
        compatible = "zmk,keymap";

        QWERTY {
// -----------------------------------------------------------------------------------------------------------------------------
// |  ESC   |   Q    |   W    |     E     |     R     |     T     | # |     Y     |     U    |    I    |    O   |   P    |  -  |
// |        | A/LGUI | S/LALT |  D/LCTRL  |  F/LSHFT  |     G     | # |     H     | J/LSHFT  | K/LCTRL | L/LALT | ;/LGUI |  '  |
// |        |   Z    | X/RALT |     C     |     V     |     B     | # |     N     |     M    |    ,    | ./RALT |   /    |  `  |
//                            | ESC/MEDIA | TAB/MOUSE | SPACE/NAV | # | ENTER/SYM | BSPC/NUM | DEL/FN  |

            bindings = <
&kp ESC     &kp Q       &kp W       &kp E          &kp R          &kp T                &kp Y          &kp U         &kp I          &kp O         &kp P          &kp MINUS
&trans      &mt LGUI A  &mt LALT S  &mt LCTRL D    &mt LSHFT F    &lt FRENCH G         &lt FRENCH H   &mt LSHFT J   &mt LCTRL K    &mt LALT L    &mt LGUI SEMI  &kp SQT
&trans      &kp Z       &mt RALT X  &kp C          &kp V          &kp B                &kp N          &kp M         &kp CMMA       &mt RALT DOT  &kp FSLH       &kp GRAVE
                                    &lt MEDIA ESC  &lt MOUSE TAB  &lt NAV SPACE        &lt SYM ENTER  &lt NUM BSPC  &lt FN DEL
            >;
        };
 
        GAMING_QWERTY {
// ----------------------------------------------------------------------------------------------------
// |  ESC   |   Q   |   W   |   E   |   R   |   T   | # |   Y   |   U   |   I   |   O   |   P   |  -  |
// |        |   A   |   S   |   D   |   F   |   G   | # |   H   |   J   |   K   |   L   |   ;   |  '  |
// |        |   Z   |   X   |   C   |   V   |   B   | # |   N   |   M   |   ,   |   .   |   /   |  `  |
//                          |  ESC  |  TAB  | SPACE | # | ENTER | BSPC  |  DEL  |

            bindings = <
&kp ESC  &kp Q  &kp W  &kp E    &kp R      &kp T          &kp Y      &kp U     &kp I     &kp O    &kp P     &kp MINUS
&trans   &kp A  &kp S  &kp D    &kp F      &kp G          &kp H      &kp J     &kp K     &kp L    &kp SEMI  &kp SQT
&trans   &kp Z  &kp X  &kp C    &kp V      &kp B          &kp N      &kp M     &kp CMMA  &kp DOT  &kp FSLH  &kp GRAVE
                          &kp ESC  &kp TAB    &kp SPACE      &kp ENTER  &kp BSPC  &kp DEL
            >;
        };

        NAV {
// -------------------------------------------------------------------------------------------
// |     |      |      |       |       |      | # | REDO  | CUT  | COPY | PASTE | UNDO  |     |
// |     | LGUI | LALT | LCTRL | LSHFT |      | # | LEFT  | DOWN | UP   | RIGHT | CAPS  |     |
// |     |      | RALT |       |       |      | # | HOME  | PGDN | PGUP | END   | INS   |     |
//                     |       |       | HELD | # | ENTER | BSPC | DEL  |

            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans        &kp K_REDO    &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp K_UNDO    &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans        &kp LEFT      &kp DOWN   &kp UP      &kp RIGHT    &kp CAPSLOCK  &trans
&trans  &trans    &kp RALT  &trans     &trans     &trans        &kp HOME      &kp PG_DN  &kp PG_UP   &kp END      &kp INS       &trans
                            &trans     &trans     &trans        &kp ENTER     &kp BSPC   &kp DEL
            >;
        };

// TODO
// Add mouse keys when implemented in ZMK

        MOUSE {
// ------------------------------------------------------------------------------------
// |     |      |      |       |       |      | # |     |     |     |     |     |     |
// |     | LGUI | LALT | LCTRL | LSHFT |      | # |     |     |     |     |     |     |
// |     |      | RALT |       |       |      | # |     |     |     |     |     |     |
//                     |       | HELD  |      | # |     |     |     |

            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans    &kp RALT  &trans     &trans     &trans        &trans  &trans  &trans  &trans  &trans  &trans
                            &trans     &trans     &trans        &trans  &trans  &trans
            >;
        };

        MEDIA {
// -----------------------------------------------------------------------------------------------------
// |     |      |      |       |       |      | # | BOOTLOAD |        |        |        |         |     |
// |     | LGUI | LALT | LCTRL | LSHFT |      | # | PREV     | VOL_D  | VOL_U  | NEXT   | EP_TOG  |     |
// |     |      | RALT |       |       |      | # | BT_0*    | BT_1*  | BT_2*  | BT_3*  | OUT_TOG |     |
//                     | HELD  |       |      | # | PLAY     | STOP   | MUTE   |
//
// BT_X*: use shift to go to X number profil and clear it

            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans        &bootloader   &trans         &trans        &trans        &trans             &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans        &cp C_PREV    &cp C_VOL_DN   &cp C_VOL_UP  &cp C_NEXT    &ext_power EP_TOG  &trans
&trans  &trans    &kp RALT  &trans     &trans     &trans        &bt_sel_0     &bt_sel_1      &bt_sel_2     &bt_sel_3     &out OUT_TOG       &trans
                            &trans     &trans     &trans        &cp C_PLAY    &cp C_STOP     &cp C_MUTE
            >;
        };

        NUM {
// -----------------------------------------------------------------------------------
// |     |  [  |  7  |  8  |  9  |  ]  | # |     |       |       |      |      |     |
// |     |  '  |  4  |  5  |  6  |  =  | # |     | LSHFT | LCTRL | LALT | LGUI |     |
// |     |  `  |  1  |  2  |  3  |  \  | # |     |       |       | RALT |      |     |
//                   |  .  |  0  |  -  | # |     | HELD  |       |

            bindings = <
&trans  &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT         &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp SQT    &kp N4  &kp N5   &kp N6  &kp EQUAL        &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH         &trans  &trans     &trans     &kp RALT  &trans    &trans
                           &kp DOT  &kp N0  &kp MINUS        &trans  &trans     &trans
            >;
        };

        SYM {
// ------------------------------------------------------------------------------------
// |     |  {  |  &  |  *  |  (  |  }  | # |      |       |       |      |      |     |
// |     |  "  |  $  |  %  |  ^  |  +  | # |      | LSHFT | LCTRL | LALT | LGUI |     |
// |     |  ~  |  !  |  @  |  #  |  |  | # |      |       |       | RALT |      |     |
//                   |  (  |  )  |  _  | # | HELD |       |       |

            bindings = <
&trans  &kp LBRC   &kp AMPS  &kp ASTRK  &kp LPAR   &kp RBRC              &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp DQT    &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS              &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE              &trans  &trans     &trans     &kp RALT  &trans    &trans
                             &kp LPAR   &kp RPAR   &kp UNDERSCORE        &trans  &trans     &trans
            >;
        };

        LAYERS {
// ---------------------------------------------------------------------------------------------
// |      |     |     |     |     |      | # |      |     |         |                |     |     |
// |      |     |     |     |     |      | # |      |     |         |                |     |     |
// |      |     |     |     |     |      | # |      |     | QWERTY  | GAMING_QWERTY  |     |     |
//                    |     |     | HELD | # | HELD |     |         |

            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans        &trans  &trans  &trans       &trans              &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans        &trans  &trans  &trans       &trans              &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans        &trans  &trans  &to QWERTY   &to GAMING_QWERTY   &trans  &trans
                        &trans  &trans  &trans        &trans  &trans  &trans
            >;
        };


        FUN {
// ------------------------------------------------------------------------------------------
// |     |  F12 |  F7  |  F8  |  F9   | PSCRN | # |     |       |       |      |      |     |
// |     |  F11 |  F4  |  F5  |  F6   | SLCK  | # |     | LSHFT | LCTRL | LALT | LGUI |     |
// |     |  F10 |  F1  |  F2  |  F3   | PAUSE | # |     |       |       | RALT |      |     |
//                     | ESC  | SPACE |  TAB  | # |     |       | HELD  |

            bindings = <
&trans  &kp F12  &kp F7  &kp F8   &kp F9     &kp PSCRN              &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp F11  &kp F4  &kp F5   &kp F6     &kp SLCK               &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp F10  &kp F1  &kp F2   &kp F3     &kp PAUSE_BREAK        &trans  &trans     &trans     &kp RALT  &trans    &trans
                         &kp ESC  &kp SPACE  &kp TAB                &trans  &trans     &trans
            >;
        };

        FRENCH {
// ------------------------------------------------------------------------------------
// |     |      |  é   |       |       |      | # |      |  ù  |     |     |     |     |
// |  à  |      |      |       |       | HELD | # | HELD |     |     |     |     |     |
// |     |      |      |       |       |      | # |      |     |     |     |     |     |
//                     |       |       |      | # |      |     |     |

            bindings = <
&trans       &trans    &trans          &fr_e_acute   &fr_e_grave  &trans        &trans  &fr_u_grave  &trans  &trans  &trans  &trans
&trans  &fr_a_grave    &trans          &trans        &trans       &trans        &trans  &trans       &trans  &trans  &trans  &trans
&trans       &trans    &trans          &fr_c_cedilla &trans       &trans        &trans  &trans       &trans  &trans  &trans  &trans
                                       &trans        &trans       &trans        &trans  &trans       &trans
            >;
        };

    };
};

CONDITIONAL_LAYER(NAV SYM, LAYERS)
